Jan 23
DevOps is a methodology. It is a approach involving set of practices

Benefits:
1.Increases Speed-We can simultaneously develop and deploy which decreases time
2.Rapid Delivery
3.Reliability-scaling
horizontal Scaling-Increases Nodes,RAMs
vertical Scaling-
4.Improved Collaboration and Trust
5.Better Feedback Loop

DevOps Practices:
1.CI/CD- Integrate and develop code simul
2.Automation- Files etc are automated with tools
3.Monitoring and Logging- Like we can know who is pushing the code etc,we can monitor(tracking)
4.Comm and collab- Interaction
5.Microservices- we do not develop whole project at once,we divide into small services and then we combine
6.Change the Culture

GIT-It is a Version Control System
GIT Hub- Internet hosted Service
GIT was developed by Linus Torvald in 2005,open source,It takes snapshot of our proj files at that instance
Like Tarcking the version of files or Projects
Always maintain back history of projects
shared access to users,we can create branches,divide repos etc
we can backup code files if there are issues.Store backups on diff servers
3 states:
Modified-Modifying the files,still not committed
Staged-we'll have two snapshots
Committed-then we'll commit our files

GIT Basics
Config- git config user.name "name"
		we can configure with a name
	   git config user.name
		it shows the last user name 	given
	   git config --list
		it displays the list
Help-   git help
		gives list of git commands
	   git help init
		gives manual page
	   to go back press esc+q
Init-  for setting up repo
Status-gives status of current repo,it first tells what branch we are in.Here the files will be in untracked state
Add-   to make the untracked files staged we give - git add filename
	  it only changes the state to staging but it is still not committed
	  git add . - will change the state of all untracked files to staged
Restore- helps to unstage or even discard uncommitted local changes.
Commit-git commit -m "Message",to commit all files git commit -a -m "Message"
Diff-shows the changes between two input sets

In GIT Hub we have Repos which is a collection of Projects,Files

Jan 24
git tracks the snapshots or instance of operations
delete- to del folder rm -r foldername,to del file in folder rm -rf filename
#to see commit history-git log
#to show the logs in one line- git log --oneline
#git log --max-count-limits the maximum count of git commits
#to push files to online repo-git push
#to directly commit the files without adding to staging-git commit -a filename for committing one file,git commit -a . for committing all files
global-sets configuration throughout all the repo

.gitignore
used to add files that are wanted to be ignored
Example:
*.py-ignores all the py files in the current folder
to del all py files in another folder we should mention the name of the Folder
!test.py-ignores all py files except test.py

why staging?
do not need to commit everytime.We can keep it aside if we want to do any changes,later we can commit
git restore -S filename-restores the files to working dir,but it will be still in the tracking state.It maintains the snapshots
git restore .-restores files completely
git reset- to go back from commit to stage state
git clean-removes untracked files
git clean -n-tells which files can be removed
git clean -nd-tells that it will remove the untracked directory
git clean -f-removes files
mv-two step process
mv filename1 newname
it first del filename 1 and newname will be in untracked state if we see the status
but in Git
git mv filename1 newname
it is used for renaming and moving
it only renames the file and it will be staged
git commit --amend- takes the prev commit and add changes to the old commit if changes are not so big
git reset- goes back to previous version

branches
it helps other users to use our code
we can create multiple copies of that inst so users can use the same code at the same time
at last we commit our changes and then merge
Branch will be created at the last committed pos

git branch or git branch --list-lists all the branches
git branch branchname-for creating branch
git checkout branchname-changes to the new branch
#Behind and ahead shows how many commits ahead or behind the branch is
git switch branch-switches from one to another branch
git merge-combines two branches
git merge branch_from which you want to merge with def branch.It actually points to the branch or last committed state
If we want to merge two diff branches,we create another node and link those two branches
git branch -D branchname-to delete the branch and the next branch will be the one with which it was merged

Jan 25
git Stash- it uses Stack,It maintains file snapshots
If we want to revert the changes made to the file we can use stash
git stash list-gives the list
git stash push -m "message"-shows the stash with a message in list
git stash clear-clears the stash list
git stash show (optional)index-(by def index is 0)shows how many files changed,how many lines inserted
git stash apply --index index number-it shows particular image of that file,apply the changes
git stash pop or git stash pop --index indexnum-removes the latest stash
git stash clear/drop[index]-which clears the stash list

git tag-Tags are ref's that point to specific points in Git history
git tag --list or -l-gives list of tags
lightweight tag-git tag <tag>
annotated tag-git tag <tag> -a -m "message"[<prev_commit_ID>]

git revert-used for undoing the commits,pushes the head back to the prev commit
It creates new commit attaches to head and removes changes from the reverted commit
reset goes back from commit,but revert removes the changes
git revert --ab-to stop reverting
git Rebase-moves changes from current head and merges
git merge <from-branch>
#It rewrites commit History
#cannot be used in public repo
git checkout-move head to particular commit ahead or back,*shows the state or changes made under that particular commit
reset hides the commits but checkout just moves the head

Jan 27

git cherry Pick-copy commits between branches.If we want to merge two branches,changes will be updated,but you don't want both parts of code we only want changes under osome particular commit then we use this command
git cherry-pick<commitID>

Other Internet Hosting Services:
GitLab,Bitbucket by Atlasssian,AWS COde Commit,Azure DevOps

//ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIdSb/Tf/NnywhHoYgPvsxuPNdC2JJDl2OZ+4n3YUAmx 20A91A05A4@aec.edu.in//

Remote/origin-Files in our system are local,when we want to put it in cloud or git those are called Remote files
whenever we define remote,we refer to it as origin.
git remote-acts as bookmarks
to check existing remotes-git remote
for adding remotes-git remote add name or <url from git.git>
for checking remote list-git remote -v
push-offline to online
fetch is reverse
git remote show-it is same like -v command but it gives additional info
git remote rm name-to remove remote
git push-to push changes from git to github
git fetch or pull-sync remote changes with local
Repo are folders
clone/fork-by cloning we can make changes and it can be pushed and pulled,done by developers.
forking is done by any other person who wants to use the code

